# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#trigger:
#- master

#pool:
#  vmImage: 'windows-latest'

#variables:
#  solution: '**/*.sln'
#  buildPlatform: 'Any CPU'
#  buildConfiguration: 'Release'

#steps:
#- task: NuGetToolInstaller@1

#- task: NuGetCommand@2
#  displayName: 'Use .NET 6 Core sdk'
#  inputs:
#    restoreSolution: '$(solution)'
#    packageType: 'sdk'
#    version: '6.0.x'
#    includePreviewVersions: true

#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'




    # .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  azureSubscription: 'XXXX'
  functionAppName: 'XXXX'
  vmImageName: 'windows-latest'
  workingDirectory: '$(System.DefaultWorkingDirectory)/XXXX'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 6 Core sdk'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        includePreviewVersions: true

    #- task: DotNetCoreCLI@2
    #  displayName: Build
    #  inputs:
    #    command: 'build'
    #    projects: |
    #      $(workingDirectory)/*.csproj
    #    arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    #- task: ArchiveFiles@2
    #  displayName: 'Archive files'
    #  inputs:
    #    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
    #    includeRootFolder: false
    #    archiveType: zip
    #    archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #    replaceExistingArchive: true

    #- publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #  artifact: drop

#- stage: Deploy
#  displayName: Deploy stage
#  dependsOn: Build
#  condition: succeeded()

#  jobs:
#  - deployment: Deploy
#    displayName: Deploy
#    environment: 'development'
#    pool:
#      vmImage: $(vmImageName)

#    strategy:
#      runOnce:
#        deploy:

#          steps:
#          - task: AzureFunctionApp@1
#            displayName: 'Azure functions app deploy'
#            inputs:
#              azureSubscription: '$(azureSubscription)'
#              appType: functionApp
#              appName: $(functionAppName)
#              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'