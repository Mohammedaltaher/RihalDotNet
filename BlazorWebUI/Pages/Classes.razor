@page "/Classes"
@using Application.Features.ClassFeatures.Commands
@using Application.Features.ClassFeatures.Queries
@using Domain.Entities
@using static Application.Features.ClassFeatures.Commands.CreateClassCommand

<PageTitle>Class </PageTitle>
@inject IMediator Mediator;
@inject MudBlazor.ISnackbar snackBar;
@inject NavigationManager uriHelper;
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Classs</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="Class.Name" Label=" Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Class</MudButton>
    </MudCardContent>
</MudCard>
<br />

<MudTable Elevation="25" Items="BindClass()" Filter="new Func<ClassDto, bool>(Search)" @bind-customer="Class">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Classs</MudText>
        <MudSpacer></MudSpacer>
        <MudTextField @bind-Value="searchString" Placeholder="Search for Classs..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Class Name</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Class Name">@context.Name</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>
</MudTable>
@code {


    private string searchString = "";

    private CreateClassCommand Class = new(); //C# 9 Syntax
    private GetClassByIdQuery GetClassById = new();
    private List<ClassDto> Classs = new();

    private int CurrentClassId = 0;
    protected override async Task OnInitializedAsync()
    {
        ClasssBaseModel? obj = await Mediator.Send(new GetAllClassQuery());
        Classs = obj.Data;
    }

    private async Task GetAllClasss()
    {
        
        ClasssBaseModel? obj = await Mediator.Send(new GetAllClassQuery());
        Classs = obj.Data;
    }
    private List<ClassDto> BindClass()
    {
        GetAllClasss();
        return Classs;
    }
    private bool Search(ClassDto Class)
    {
        if (Class.Name is not null && Class.Name is not null && Class.Name is not null &&
            Class.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async void Save()
    {
        if (CurrentClassId == 0)
        {
            var obj = await Mediator.Send(Class);
            snackBar.Add("Class record saved", Severity.Success);
        }
        else
        {
            var obj = await Mediator.Send(new UpdateClassCommand() { Id = CurrentClassId, Name = Class.Name });
            snackBar.Add("Class record Updated", Severity.Success);
        }
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        GetAllClasss();
    }
    private async void Edit(int id)
    {
        ClassBaseModel obj = await Mediator.Send(new GetClassByIdQuery() { Id = id });
        Class.Name = obj.Data.Name;
        CurrentClassId = obj.Data.Id;
    }
    private async void Delete(int id)
    {
        ClassBaseModel obj = await Mediator.Send(new DeleteClassByIdCommand() { Id = id });
        snackBar.Add("Customer Data Deleted.", Severity.Success);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        GetAllClasss();
    }
}