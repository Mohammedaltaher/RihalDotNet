@page "/Students"
@using Application.Features.StudentFeatures.Commands
@using Domain.Entities
@using static Application.Features.StudentFeatures.Commands.CreateStudentCommand

<PageTitle>Student </PageTitle>
@inject IMediator Mediator;
@inject MudBlazor.ISnackbar snackBar;
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Students</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="student.Name" Label=" Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.Birth_Date" Label="Birth Date" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.ClassId" Label="class" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="student.CountryId" Label="Country" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Student</MudButton>
    </MudCardContent>
</MudCard>
<br />

<MudTable Elevation="25" Items="BindStudent()" Filter="new Func<StudentDto, bool>(Search)" @bind-customer="student">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Students</MudText>

        <MudTextField @bind-Value="searchString" Placeholder="Search for Students..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Student Name</MudTh>
        <MudTh>Age</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>ContactNo</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Student Name">@context.Name</MudTd>
        <MudTd DataLabel="Birth Date">@context.Birth_Date</MudTd>
        <MudTd DataLabel="Class">@context.Name</MudTd>
        <MudTd DataLabel="Country">@context.Name</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5,10,20,50}" />
    </PagerContent>
</MudTable>
@code {
    private string searchString = "";

    private CreateStudentCommand student = new(); //C# 9 Syntax
    private GetStudentByIdQuery GetStudentById = new();
    private List<StudentDto> students = new();
    private int CurrentStudentId = 0 ;
    protected override async Task OnInitializedAsync()
    {
        StudentsBaseModel? obj = await Mediator.Send(new GetAllStudentQuery());
        students = obj.Data;
    }

    private async Task GetAllStudents()
    {
        StudentsBaseModel? obj = await Mediator.Send(new GetAllStudentQuery());
        students = obj.Data;
        CurrentStudentId = 0;
    }
    private List<StudentDto> BindStudent()
    {
        GetAllStudents();
        return  students;
    }
    private bool Search(StudentDto student)
    {
        if (student.Name is not null && student.Name is not null && student.Name is not null &&
            student.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || student.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || student.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async void Save()
    {
        if (CurrentStudentId == 0)
        {
            var obj = await Mediator.Send(student);
            snackBar.Add("Student record saved", Severity.Success);
        }
        else
        {
            var obj = await Mediator.Send(new UpdateStudentCommand(){Id = CurrentStudentId ,Name = student.Name});
            snackBar.Add("Student record Updated", Severity.Success);
        }

        GetAllStudents();
    }
    private async void Edit(int id)
    {
        StudentBaseModel obj = await Mediator.Send(new GetStudentByIdQuery() { Id = id });
        student.Name = obj.Data.Name;
        student.Birth_Date = obj.Data.Birth_Date;
        student.ClassId = obj.Data.ClassId;
        student.CountryId = obj.Data.CountryId;
        CurrentStudentId = obj.Data.Id;
    }
    private async void Delete(int id)
    {
        StudentBaseModel obj = await Mediator.Send(new DeleteStudentByIdCommand() { Id = id });
        snackBar.Add("Customer Data Deleted.", Severity.Success);
        GetAllStudents();
    }
}